<!doctype html>
<html>
<head><title>Relay: The Message-Passing Framework</title>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=980">
<style>
html, body, table, tr, td, dl, dd, dt, h1, h2, h3, h4 {margin:0; padding:0; border:0; font:normal 12pt georgia,times,serif}
body {line-height:1.7em; padding:2% 1%}
h1, h2, h3 {font-weight:bold; margin:2em 0 0.5em 0}
h1 {font-size:2.5em; margin:0 auto; text-align:center} h2 {font-size:1.8em} h3 {font-size:1.1em}
#main {margin:0 auto; padding:1%; max-width:900px; min-width:600px}
#summary {margin:1em auto; padding:0 15%; max-width:600px; color:#666; font-style:italic; text-align:justify}
pre, tt {white-space:pre-wrap; font:0.9em consolas,monospace}
tt {background:#eee; padding:0.1em 0.3em}
pre {border:1px solid #ccc; background:#f6f6f6; padding:1% 2%; box-shadow:inset 1px 1px 10px #bbb}
pre .h {color:#bbb; font-weight:normal}
pre .m1 {color:#e22}
pre .m2 {color:#44c}
pre .m3 {color:#4c4}
pre .m4 {color:#cc0}
pre .m5 {color:#b0b}
dl, dt, dd {line-height:inherit}
dl {border:solid #ccc; border-width:1px 1px 0 1px}
dl h4 {background:#ddd; padding:0.3em 0.5em; font-weight:bold}
dt {margin:1em 0 0 0; padding:0 1%}
dd {padding:1em 1% 1em 4%; border-bottom:1px solid #ccc}
</style>
</head>
<body>
  <h1>relay</h1>

  <div id="main">

    <div id="summary">
    Relay is a javascript based framework for organizing web applications into scoped 
    modules and communication is done by passing messages along the HTML tree structure, 
    thereby eliminating the need to pass object references around.
    </div>

    <h3>How to set up event listeners:</h3>

<pre>
<b class="h">&lt;body&gt;</b>
  &lt;ins <b class="m3">cite="js:Spinner"</b>&gt;
    &lt;input type=text value="0"&gt;
    &lt;input type=button onclick="<b class="m1">relay('spinDownClick', this);</b>"&gt;
    &lt;input type=button onclick="<b class="m2">relay('spinUpClick', this);</b>"&gt;
  &lt;/ins&gt;
<b class="h">&lt;/body&gt;</b>

<b class="h">&lt;script language=javascript&gt;</b>
<b class="m3">function Spinner</b>(name, node) {...}

Spinner.prototype = {
  value: 0,
  <b class="m1">spinDownClick: function()</b> {
    this.relayBaseNode.getElementsByTagName("input")[0].value -= 1;
  },
  <b class="m2">spinUpClick: function()</b> {
    this.relayBaseNode.getElementsByTagName("input")[0].value += 1;
  }
};
<b class="h">&lt;/script&gt;</b></pre>

    <h3>How to pass messages up the HTML tree:</h3>

<pre>
<b class="h">&lt;body&gt;</b>
  &lt;ins <b class="m4">cite="js:CartItem"</b>&gt;
    ...
    &lt;ins <b class="m3">cite="js:Spinner"</b>&gt;
      &lt;input type=text value="0"&gt;
      &lt;input type=button onclick="relay('spinDownClick', this);"&gt;
      &lt;input type=button onclick="relay('spinUpClick', this);"&gt;
    &lt;/ins&gt;
    ...
  &lt;/ins&gt;
<b class="h">&lt;/body&gt;</b>

<b class="h">&lt;script language=javascript&gt;</b>
<b class="m3">function Spinner</b>(name, node) {...}

Spinner.prototype = {
  value: 0,
  spinDownClick: function() {
    var elm = this.relayBaseNode.getElementsByTagName("input")[0];
    elm.value -= 1;
    <b class="m5">relay("quantityChanged", elm.value, this);</b>
  },
  spinUpClick: function() {
    var elm = this.relayBaseNode.getElementsByTagName("input")[0];
    elm.value += 1;
    <b class="m5">relay("quantityChanged", elm.value, this);</b>
  }
};

<b class="m4">function CartItem</b>(name, node) {...}

CartItem.prototype = {
  <b class="m5">quantityChanged: function</b>(num) {
    //...
  }
};
<b class="h">&lt;/script&gt;</b></pre>

    <h3>Interacting with the module hidden by the node:</h3>

<pre>
<b class="h">&lt;body&gt;</b>
  &lt;ins <b class="m2">id="pics"</b> <b class="m1">cite="js:acme.Photos"</b>&gt;&lt;/ins&gt;
<b class="h">&lt;/body&gt;</b>

<b class="h">&lt;script language=javascript&gt;</b>
var acme = {
  Photos: function(name, node) {...}
};

acme.Photos.prototype = {
  <b class="m1">fitToScreen: function()</b> {...}
};
...
function action() {
  <b class="m2">relay.byId("pics")</b><b class="m1">.fitToScreen();</b>

  <b class="h">// or by using jQuery:</b>
  jQuery("#pics").each(function() {
    <b class="m2">relay.byId(this)</b><b class="m1">.fitToScreen();</b>
  });
}
<b class="h">&lt;/script&gt;</b></pre>

    <h2>Features</h2>
    <div style="padding:0.5% 2%; margin:0 5%; border:1px solid #ccc; background:#eee">
      <h3 style="margin:0.5em 0">Relay</h3>
      <div style="margin:1em 4%; padding:0.5% 2%; border:1px solid #dbb; background:#fdd">
        <h3 style="margin:0.5em 0">Module Framework</h3>
        For writing standalone HTML components that are de-coupled from 
        each other. HTML components have a Javascript class from which it
        derives it's methods and properties. HTML components can be nested 
        within one another without knowing it.
      </div>
      <div style="margin:1em 4%; padding:0.5% 2%; border:1px solid #bdb; background:#dfd">
        <h3 style="margin:0.5em 0">Messaging Framework</h3>
        The pipeline for passing messages between HTML components. Like 
        the module framework, you do not need to know of 
        the existence of a parent to pass messages to a parent. And you 
        do not need to know the existence of children to listen in on 
        children calling.

        <div style="margin:1em 0 1em 4%; padding:0.5% 2%; border:1px solid #bbd; background:#ddf">
          <h3 style="margin:0.5em 0">Upstream</h3>
          Upstream messages always travel towards the root node and are only 
          received by the parent and ancestor components in hierarchical order.
          Messages can return values allowing 
          for the root node to provide a response to the leaf node.
        </div>

        <div style="margin:1em 0 1em 4%; padding:0.5% 2%; border:1px solid #bbd; background:#ddf">
          <h3 style="margin:0.5em 0">Downstream</h3>
          Downstream messages travel from the current node to all the leaf 
          nodes. Objects are implicitly subscribed if they are part 
          of the HTML tree and are implicitly unsubscribed if they are 
          removed from the HTML tree.

          <p>Unlike the publish-subscribe model, messages are only 
          broadcast to the node's descendants.
        </div>
      </div>
    </div>

    <h2>Download</h2>
    <a href="http://github.com/relay/relay" style="font-size:1.5em">Relay on Github</a>
    <a href="http://github.com/relay/relay/blob/master/relay-dev.js" style="font-size:1.2em; margin:0 2em">View Source</a>
    <a href="http://raw.github.com/relay/relay/master/relay.js" style="font-size:1.2em">Download Minified (1.7k)</a>

    <h2>API</h2>
    <dl>
      <h4>Passing Messages to Parents:</h4>
      <dt>
      Syntax: <tt>relay(name, [parameters]*, this)</tt><br>
      Example: <tt>relay("mailto", "spam@hotmail.com", false, 9, this)</tt> &rArr; <tt>mailto("spam@hotmail.com", false, 9)</tt>
      </dt>

      <dd>Walks down the node tree starting from the current node until it finds a Javascript object 
      with a function called <tt>name</tt> and calls it while passing in the supplied parameters. If the 
      <tt>name</tt> function returns the object <tt>relay.BUBBLE</tt>, then we continue to walk down the 
      node tree to the next node with a Javascript object with the same method and try again.

      <p>The return value of the <tt>name</tt> function is also returned by relay.</dd>

      <dt>
      Syntax: <tt>relay(inlineFunction, [parameters]*, this)</tt><br>
      Example: <tt>relay(function() {this.chatName = ""}, this)</tt>
      </dt>

      <dd>Same behavior as above, but does not match to a function name, but instead executes on the first 
      object found in the HTML tree.</dd>

      <h4>Passing Messages to Decendants:</h4>
      <dt>
      Syntax: <tt>relay.publish(name, [parameters]*, this)</tt><br>
      Example: <tt>relay.publish("foldersChanged", this)</tt>
      </dt>

      <dd>Gets a list of descendant elements of the current node, which are modules and check if the module has 
      a <tt>subscribe</tt> property on it. If so, check if the <tt>subscribe</tt> object has a property
      called <tt>name</tt> that points to a function. If so, execute the function with the <tt>this</tt> scope
      set to the module.

<p><tt>Folder = {
  subscribe: {
    "foldersChanged": function() {
      alert(this.name);
    }
  },
  name: "Inbox"
}</tt>
      </dd>

      <h4>Defining HTML Modules:</h4>
      <dt>
      Syntax: <tt>&lt;INS cite="js:name"&gt;&lt;/INS&gt;</tt><br>
      Example: <tt>&lt;INS cite="js:acme.DatePicker"&gt;&lt;/INS&gt;</tt> &rArr; <tt>new acme.DatePicker("acme.widgets.DatePicker", node)</tt>
      </dt>

      <dd>Finds and initializes the object called <tt>name</tt>. A reference to the object is kept
      privately inside Relay and can be retrieved by calling <tt>relay.byId(document.getElementById("item1"))</tt>
      or <tt>relay.byId("item1")</tt> assuming that the element has an id of "item1".
      </dd>

      <h4>Interacting with Modules:</h4>
      <dt>
      Syntax: <tt>obj = relay.byId(nodeOrID)</tt><br>
      </dt>

      <dd>Get's the Javascript object hidden by the supplied node or supplied node ID. This is the same
      as calling <tt>relay.byId(document.getElementById(id))</tt>.</dd>

      <h4>Loading Relay:</h4>
      <dt>
      Syntax: <tt>relay.start()</tt> or <tt>relay.initTree(node)</tt><br>
      Example: <tt>window.onload = function() { relay.start(); }</tt>
      </dt>

      <dd>Called when the webpage is first loaded to parse the HTML document 
      for modules and to initialize the modules. If parts of the HTML are created dynamically, then you can 
      call <tt>initTree(node)</tt> to initialize new sections of the webpage. Calling it multiple 
      times won't create duplicates as checks are added to avoid this.
      
      <p>You should call this at the bottom of your webpage before the ending <tt>&lt;/BODY&gt;</tt> tag.</dd>
    </dl>

    <div style="border-top:1px dashed #ccc; margin-top:1em; padding:0.1em 0; font-size:0.7em; text-align:center; color:#999">
    Copyright &copy; 2012
    </div>
  </div>
</body>
</html>